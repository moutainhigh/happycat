/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.woniu.sncp.cbss.api.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 服务端回执数据
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-14")
public class Echo implements org.apache.thrift.TBase<Echo, Echo._Fields>, java.io.Serializable, Cloneable, Comparable<Echo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Echo");

  private static final org.apache.thrift.protocol.TField MSGCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgcode", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NEXT_SIGN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextSignType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SERVER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverState", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField RESOLVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resolveType", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EchoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EchoTupleSchemeFactory());
  }

  public long msgcode; // required
  public String message; // required
  public String uuid; // required
  /**
   * Echo.resolveType为ECHO_DATA_RESOLVE_TYPE_DEFAULT,表示data是json格式
   */
  public String data; // required
  public long time; // required
  public int nextSignType; // required
  public State serverState; // required
  public String resolveType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSGCODE((short)1, "msgcode"),
    MESSAGE((short)2, "message"),
    UUID((short)3, "uuid"),
    /**
     * Echo.resolveType为ECHO_DATA_RESOLVE_TYPE_DEFAULT,表示data是json格式
     */
    DATA((short)4, "data"),
    TIME((short)5, "time"),
    NEXT_SIGN_TYPE((short)6, "nextSignType"),
    SERVER_STATE((short)7, "serverState"),
    RESOLVE_TYPE((short)8, "resolveType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSGCODE
          return MSGCODE;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // UUID
          return UUID;
        case 4: // DATA
          return DATA;
        case 5: // TIME
          return TIME;
        case 6: // NEXT_SIGN_TYPE
          return NEXT_SIGN_TYPE;
        case 7: // SERVER_STATE
          return SERVER_STATE;
        case 8: // RESOLVE_TYPE
          return RESOLVE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGCODE_ISSET_ID = 0;
  private static final int __TIME_ISSET_ID = 1;
  private static final int __NEXTSIGNTYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSGCODE, new org.apache.thrift.meta_data.FieldMetaData("msgcode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_SIGN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nextSignType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVER_STATE, new org.apache.thrift.meta_data.FieldMetaData("serverState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "State")));
    tmpMap.put(_Fields.RESOLVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resolveType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Echo.class, metaDataMap);
  }

  public Echo() {
    this.nextSignType = 1;

    this.resolveType = "1";

  }

  public Echo(
    long msgcode,
    String message,
    String uuid,
    String data,
    long time,
    int nextSignType,
    State serverState,
    String resolveType)
  {
    this();
    this.msgcode = msgcode;
    setMsgcodeIsSet(true);
    this.message = message;
    this.uuid = uuid;
    this.data = data;
    this.time = time;
    setTimeIsSet(true);
    this.nextSignType = nextSignType;
    setNextSignTypeIsSet(true);
    this.serverState = serverState;
    this.resolveType = resolveType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Echo(Echo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgcode = other.msgcode;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetData()) {
      this.data = other.data;
    }
    this.time = other.time;
    this.nextSignType = other.nextSignType;
    if (other.isSetServerState()) {
      this.serverState = other.serverState;
    }
    if (other.isSetResolveType()) {
      this.resolveType = other.resolveType;
    }
  }

  public Echo deepCopy() {
    return new Echo(this);
  }

  @Override
  public void clear() {
    setMsgcodeIsSet(false);
    this.msgcode = 0;
    this.message = null;
    this.uuid = null;
    this.data = null;
    setTimeIsSet(false);
    this.time = 0;
    this.nextSignType = 1;

    this.serverState = null;
    this.resolveType = "1";

  }

  public long getMsgcode() {
    return this.msgcode;
  }

  public Echo setMsgcode(long msgcode) {
    this.msgcode = msgcode;
    setMsgcodeIsSet(true);
    return this;
  }

  public void unsetMsgcode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGCODE_ISSET_ID);
  }

  /** Returns true if field msgcode is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgcode() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGCODE_ISSET_ID);
  }

  public void setMsgcodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGCODE_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public Echo setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getUuid() {
    return this.uuid;
  }

  public Echo setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Echo.resolveType为ECHO_DATA_RESOLVE_TYPE_DEFAULT,表示data是json格式
   */
  public String getData() {
    return this.data;
  }

  /**
   * Echo.resolveType为ECHO_DATA_RESOLVE_TYPE_DEFAULT,表示data是json格式
   */
  public Echo setData(String data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public Echo setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getNextSignType() {
    return this.nextSignType;
  }

  public Echo setNextSignType(int nextSignType) {
    this.nextSignType = nextSignType;
    setNextSignTypeIsSet(true);
    return this;
  }

  public void unsetNextSignType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTSIGNTYPE_ISSET_ID);
  }

  /** Returns true if field nextSignType is set (has been assigned a value) and false otherwise */
  public boolean isSetNextSignType() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTSIGNTYPE_ISSET_ID);
  }

  public void setNextSignTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTSIGNTYPE_ISSET_ID, value);
  }

  public State getServerState() {
    return this.serverState;
  }

  public Echo setServerState(State serverState) {
    this.serverState = serverState;
    return this;
  }

  public void unsetServerState() {
    this.serverState = null;
  }

  /** Returns true if field serverState is set (has been assigned a value) and false otherwise */
  public boolean isSetServerState() {
    return this.serverState != null;
  }

  public void setServerStateIsSet(boolean value) {
    if (!value) {
      this.serverState = null;
    }
  }

  public String getResolveType() {
    return this.resolveType;
  }

  public Echo setResolveType(String resolveType) {
    this.resolveType = resolveType;
    return this;
  }

  public void unsetResolveType() {
    this.resolveType = null;
  }

  /** Returns true if field resolveType is set (has been assigned a value) and false otherwise */
  public boolean isSetResolveType() {
    return this.resolveType != null;
  }

  public void setResolveTypeIsSet(boolean value) {
    if (!value) {
      this.resolveType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSGCODE:
      if (value == null) {
        unsetMsgcode();
      } else {
        setMsgcode((Long)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case NEXT_SIGN_TYPE:
      if (value == null) {
        unsetNextSignType();
      } else {
        setNextSignType((Integer)value);
      }
      break;

    case SERVER_STATE:
      if (value == null) {
        unsetServerState();
      } else {
        setServerState((State)value);
      }
      break;

    case RESOLVE_TYPE:
      if (value == null) {
        unsetResolveType();
      } else {
        setResolveType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSGCODE:
      return getMsgcode();

    case MESSAGE:
      return getMessage();

    case UUID:
      return getUuid();

    case DATA:
      return getData();

    case TIME:
      return getTime();

    case NEXT_SIGN_TYPE:
      return getNextSignType();

    case SERVER_STATE:
      return getServerState();

    case RESOLVE_TYPE:
      return getResolveType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSGCODE:
      return isSetMsgcode();
    case MESSAGE:
      return isSetMessage();
    case UUID:
      return isSetUuid();
    case DATA:
      return isSetData();
    case TIME:
      return isSetTime();
    case NEXT_SIGN_TYPE:
      return isSetNextSignType();
    case SERVER_STATE:
      return isSetServerState();
    case RESOLVE_TYPE:
      return isSetResolveType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Echo)
      return this.equals((Echo)that);
    return false;
  }

  public boolean equals(Echo that) {
    if (that == null)
      return false;

    boolean this_present_msgcode = true;
    boolean that_present_msgcode = true;
    if (this_present_msgcode || that_present_msgcode) {
      if (!(this_present_msgcode && that_present_msgcode))
        return false;
      if (this.msgcode != that.msgcode)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_nextSignType = true;
    boolean that_present_nextSignType = true;
    if (this_present_nextSignType || that_present_nextSignType) {
      if (!(this_present_nextSignType && that_present_nextSignType))
        return false;
      if (this.nextSignType != that.nextSignType)
        return false;
    }

    boolean this_present_serverState = true && this.isSetServerState();
    boolean that_present_serverState = true && that.isSetServerState();
    if (this_present_serverState || that_present_serverState) {
      if (!(this_present_serverState && that_present_serverState))
        return false;
      if (!this.serverState.equals(that.serverState))
        return false;
    }

    boolean this_present_resolveType = true && this.isSetResolveType();
    boolean that_present_resolveType = true && that.isSetResolveType();
    if (this_present_resolveType || that_present_resolveType) {
      if (!(this_present_resolveType && that_present_resolveType))
        return false;
      if (!this.resolveType.equals(that.resolveType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_msgcode = true;
    list.add(present_msgcode);
    if (present_msgcode)
      list.add(msgcode);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_nextSignType = true;
    list.add(present_nextSignType);
    if (present_nextSignType)
      list.add(nextSignType);

    boolean present_serverState = true && (isSetServerState());
    list.add(present_serverState);
    if (present_serverState)
      list.add(serverState);

    boolean present_resolveType = true && (isSetResolveType());
    list.add(present_resolveType);
    if (present_resolveType)
      list.add(resolveType);

    return list.hashCode();
  }

  @Override
  public int compareTo(Echo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgcode()).compareTo(other.isSetMsgcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgcode, other.msgcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextSignType()).compareTo(other.isSetNextSignType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextSignType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextSignType, other.nextSignType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerState()).compareTo(other.isSetServerState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverState, other.serverState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolveType()).compareTo(other.isSetResolveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolveType, other.resolveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Echo(");
    boolean first = true;

    sb.append("msgcode:");
    sb.append(this.msgcode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextSignType:");
    sb.append(this.nextSignType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverState:");
    if (this.serverState == null) {
      sb.append("null");
    } else {
      sb.append(this.serverState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resolveType:");
    if (this.resolveType == null) {
      sb.append("null");
    } else {
      sb.append(this.resolveType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'msgcode' because it's a primitive and you chose the non-beans generator.
    if (message == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' was not present! Struct: " + toString());
    }
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'nextSignType' because it's a primitive and you chose the non-beans generator.
    if (serverState == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverState' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EchoStandardSchemeFactory implements SchemeFactory {
    public EchoStandardScheme getScheme() {
      return new EchoStandardScheme();
    }
  }

  private static class EchoStandardScheme extends StandardScheme<Echo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Echo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSGCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgcode = iprot.readI64();
              struct.setMsgcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEXT_SIGN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextSignType = iprot.readI32();
              struct.setNextSignTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SERVER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.serverState = new State();
              struct.serverState.read(iprot);
              struct.setServerStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESOLVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resolveType = iprot.readString();
              struct.setResolveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMsgcode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'msgcode' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNextSignType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nextSignType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Echo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSGCODE_FIELD_DESC);
      oprot.writeI64(struct.msgcode);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeString(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_SIGN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.nextSignType);
      oprot.writeFieldEnd();
      if (struct.serverState != null) {
        oprot.writeFieldBegin(SERVER_STATE_FIELD_DESC);
        struct.serverState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.resolveType != null) {
        oprot.writeFieldBegin(RESOLVE_TYPE_FIELD_DESC);
        oprot.writeString(struct.resolveType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EchoTupleSchemeFactory implements SchemeFactory {
    public EchoTupleScheme getScheme() {
      return new EchoTupleScheme();
    }
  }

  private static class EchoTupleScheme extends TupleScheme<Echo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Echo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.msgcode);
      oprot.writeString(struct.message);
      oprot.writeString(struct.uuid);
      oprot.writeString(struct.data);
      oprot.writeI64(struct.time);
      oprot.writeI32(struct.nextSignType);
      struct.serverState.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetResolveType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResolveType()) {
        oprot.writeString(struct.resolveType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Echo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.msgcode = iprot.readI64();
      struct.setMsgcodeIsSet(true);
      struct.message = iprot.readString();
      struct.setMessageIsSet(true);
      struct.uuid = iprot.readString();
      struct.setUuidIsSet(true);
      struct.data = iprot.readString();
      struct.setDataIsSet(true);
      struct.time = iprot.readI64();
      struct.setTimeIsSet(true);
      struct.nextSignType = iprot.readI32();
      struct.setNextSignTypeIsSet(true);
      struct.serverState = new State();
      struct.serverState.read(iprot);
      struct.setServerStateIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.resolveType = iprot.readString();
        struct.setResolveTypeIsSet(true);
      }
    }
  }

}

