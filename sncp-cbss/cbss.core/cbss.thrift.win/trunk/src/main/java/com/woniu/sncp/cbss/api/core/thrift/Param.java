/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.woniu.sncp.cbss.api.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 请求数据--业务信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-30")
public class Param implements org.apache.thrift.TBase<Param, Param._Fields>, java.io.Serializable, Cloneable, Comparable<Param> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Param");

  private static final org.apache.thrift.protocol.TField CLASSNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("classname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESOLVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resolveType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ParamTupleSchemeFactory());
  }

  public String classname; // required
  public int resolveType; // required
  public String param; // required
  public List<String> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLASSNAME((short)1, "classname"),
    RESOLVE_TYPE((short)2, "resolveType"),
    PARAM((short)3, "param"),
    PARAMS((short)4, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLASSNAME
          return CLASSNAME;
        case 2: // RESOLVE_TYPE
          return RESOLVE_TYPE;
        case 3: // PARAM
          return PARAM;
        case 4: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOLVETYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLASSNAME, new org.apache.thrift.meta_data.FieldMetaData("classname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resolveType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Param.class, metaDataMap);
  }

  public Param() {
    this.resolveType = 1;

  }

  public Param(
    String classname,
    int resolveType,
    String param,
    List<String> params)
  {
    this();
    this.classname = classname;
    this.resolveType = resolveType;
    setResolveTypeIsSet(true);
    this.param = param;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Param(Param other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClassname()) {
      this.classname = other.classname;
    }
    this.resolveType = other.resolveType;
    if (other.isSetParam()) {
      this.param = other.param;
    }
    if (other.isSetParams()) {
      List<String> __this__params = new ArrayList<String>(other.params);
      this.params = __this__params;
    }
  }

  public Param deepCopy() {
    return new Param(this);
  }

  @Override
  public void clear() {
    this.classname = null;
    this.resolveType = 1;

    this.param = null;
    this.params = null;
  }

  public String getClassname() {
    return this.classname;
  }

  public Param setClassname(String classname) {
    this.classname = classname;
    return this;
  }

  public void unsetClassname() {
    this.classname = null;
  }

  /** Returns true if field classname is set (has been assigned a value) and false otherwise */
  public boolean isSetClassname() {
    return this.classname != null;
  }

  public void setClassnameIsSet(boolean value) {
    if (!value) {
      this.classname = null;
    }
  }

  public int getResolveType() {
    return this.resolveType;
  }

  public Param setResolveType(int resolveType) {
    this.resolveType = resolveType;
    setResolveTypeIsSet(true);
    return this;
  }

  public void unsetResolveType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOLVETYPE_ISSET_ID);
  }

  /** Returns true if field resolveType is set (has been assigned a value) and false otherwise */
  public boolean isSetResolveType() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOLVETYPE_ISSET_ID);
  }

  public void setResolveTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOLVETYPE_ISSET_ID, value);
  }

  public String getParam() {
    return this.param;
  }

  public Param setParam(String param) {
    this.param = param;
    return this;
  }

  public void unsetParam() {
    this.param = null;
  }

  /** Returns true if field param is set (has been assigned a value) and false otherwise */
  public boolean isSetParam() {
    return this.param != null;
  }

  public void setParamIsSet(boolean value) {
    if (!value) {
      this.param = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public java.util.Iterator<String> getParamsIterator() {
    return (this.params == null) ? null : this.params.iterator();
  }

  public void addToParams(String elem) {
    if (this.params == null) {
      this.params = new ArrayList<String>();
    }
    this.params.add(elem);
  }

  public List<String> getParams() {
    return this.params;
  }

  public Param setParams(List<String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLASSNAME:
      if (value == null) {
        unsetClassname();
      } else {
        setClassname((String)value);
      }
      break;

    case RESOLVE_TYPE:
      if (value == null) {
        unsetResolveType();
      } else {
        setResolveType((Integer)value);
      }
      break;

    case PARAM:
      if (value == null) {
        unsetParam();
      } else {
        setParam((String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLASSNAME:
      return getClassname();

    case RESOLVE_TYPE:
      return getResolveType();

    case PARAM:
      return getParam();

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLASSNAME:
      return isSetClassname();
    case RESOLVE_TYPE:
      return isSetResolveType();
    case PARAM:
      return isSetParam();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Param)
      return this.equals((Param)that);
    return false;
  }

  public boolean equals(Param that) {
    if (that == null)
      return false;

    boolean this_present_classname = true && this.isSetClassname();
    boolean that_present_classname = true && that.isSetClassname();
    if (this_present_classname || that_present_classname) {
      if (!(this_present_classname && that_present_classname))
        return false;
      if (!this.classname.equals(that.classname))
        return false;
    }

    boolean this_present_resolveType = true;
    boolean that_present_resolveType = true;
    if (this_present_resolveType || that_present_resolveType) {
      if (!(this_present_resolveType && that_present_resolveType))
        return false;
      if (this.resolveType != that.resolveType)
        return false;
    }

    boolean this_present_param = true && this.isSetParam();
    boolean that_present_param = true && that.isSetParam();
    if (this_present_param || that_present_param) {
      if (!(this_present_param && that_present_param))
        return false;
      if (!this.param.equals(that.param))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_classname = true && (isSetClassname());
    list.add(present_classname);
    if (present_classname)
      list.add(classname);

    boolean present_resolveType = true;
    list.add(present_resolveType);
    if (present_resolveType)
      list.add(resolveType);

    boolean present_param = true && (isSetParam());
    list.add(present_param);
    if (present_param)
      list.add(param);

    boolean present_params = true && (isSetParams());
    list.add(present_params);
    if (present_params)
      list.add(params);

    return list.hashCode();
  }

  @Override
  public int compareTo(Param other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClassname()).compareTo(other.isSetClassname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classname, other.classname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolveType()).compareTo(other.isSetResolveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolveType, other.resolveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Param(");
    boolean first = true;

    sb.append("classname:");
    if (this.classname == null) {
      sb.append("null");
    } else {
      sb.append(this.classname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resolveType:");
    sb.append(this.resolveType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("param:");
    if (this.param == null) {
      sb.append("null");
    } else {
      sb.append(this.param);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (classname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'classname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'resolveType' because it's a primitive and you chose the non-beans generator.
    if (param == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'param' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ParamStandardSchemeFactory implements SchemeFactory {
    public ParamStandardScheme getScheme() {
      return new ParamStandardScheme();
    }
  }

  private static class ParamStandardScheme extends StandardScheme<Param> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Param struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLASSNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classname = iprot.readString();
              struct.setClassnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOLVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resolveType = iprot.readI32();
              struct.setResolveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param = iprot.readString();
              struct.setParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.params = new ArrayList<String>(_list20.size);
                String _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readString();
                  struct.params.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResolveType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resolveType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Param struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.classname != null) {
        oprot.writeFieldBegin(CLASSNAME_FIELD_DESC);
        oprot.writeString(struct.classname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOLVE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.resolveType);
      oprot.writeFieldEnd();
      if (struct.param != null) {
        oprot.writeFieldBegin(PARAM_FIELD_DESC);
        oprot.writeString(struct.param);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (String _iter23 : struct.params)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ParamTupleSchemeFactory implements SchemeFactory {
    public ParamTupleScheme getScheme() {
      return new ParamTupleScheme();
    }
  }

  private static class ParamTupleScheme extends TupleScheme<Param> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Param struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.classname);
      oprot.writeI32(struct.resolveType);
      oprot.writeString(struct.param);
      BitSet optionals = new BitSet();
      if (struct.isSetParams()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (String _iter24 : struct.params)
          {
            oprot.writeString(_iter24);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Param struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.classname = iprot.readString();
      struct.setClassnameIsSet(true);
      struct.resolveType = iprot.readI32();
      struct.setResolveTypeIsSet(true);
      struct.param = iprot.readString();
      struct.setParamIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new ArrayList<String>(_list25.size);
          String _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = iprot.readString();
            struct.params.add(_elem26);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

}

